#!/usr/bin/env ruby

require 'pp'
require_relative '../short_bus'

driver = ShortBus::Driver.new

monitor = ShortBus::Monitor.new driver

driver.subscribe(
  name: 'lambie',
  service: lambda { |message|
    sleep 0.2
    raise Exception.new 'random explosion' if rand(4) == 0
    'lambie::response'
  }
)

driver.subscribe(
  debug: true, 
  name: 'got', 
  publisher_spec: 'lambie', 
  thread_count: 2
) do |msg|
  sleep 0.3
  puts "anon-1 #{msg}"
  nil
end

driver.subscribe(
  message_spec: ['h**', '**::hello'],
  name: 'inline_bob'
) do |message|
  puts("inline_bob received: Event(#{message}) from " +
       message.publisher || 'Anonymous-Sender')
  puts "inline_bob received: Payload(#{message.payload})" if message.payload
  message << 'arbitrary object sent via Message'
  'new::message'
end

Thread.new { 
  5.times do 
    driver << "publish::thread"
    sleep 0.15
  end
}

first_message = driver << ["hi::bob", "potato"]
sleep 0.2
driver << ["hello::jim", "pot"]
sleep 0.2
driver << ["hola::xxx", "stew"]

puts "Shift-back from first message #{first_message.shift(2)}"

sleep 1
