#!/usr/bin/env ruby

require_relative 'short_bus'
require 'pp'

driver = ShortBus::Driver.new

lamb = lambda { |message|
  puts "Lambda Received: #{message}"
  sleep 0.25
  "lambdasend::hi"
}
driver.register(service: lamb, thread_count: 2)

driver.register(debug: false, event_spec: 'lambdasend::hi', thread_count: 2) do |msg|
  puts "GOT: #{msg}"
  sleep 0.5
  nil
end

driver.register(event_spec: ["hey**", "hi::*"]) do |message|
  puts "Block Received: Event(#{message})" 
  puts "Block Received: Payload(#{message.payload})" if message.payload
end

#pp driver.services

Thread.new { 
  10.times do 
    driver << "send::thread"
    sleep 0.1
  end
}
driver << ["hi::bob", "potato"]
sleep 0.25
driver << ["hello::jim", "pot"]
sleep 0.25
driver << ["hi::xxx", "stew"]
sleep 5.0
