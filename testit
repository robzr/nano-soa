#!/usr/bin/env ruby

require 'pp'
require_relative 'short_bus'

driver = ShortBus::Driver.new

driver.register(
  name: 'lambie',
  service: lambda { |message|
    puts "Lambda Received: #{message} from #{message.sender}"
    sleep 0.2
    raise Exception.new 'random explosion' if rand(4) == 0
    'lambie::response'
  }
)

driver.register(
  debug: false, 
  name: 'got', 
  sender_spec: 'lambie', 
  thread_count: 2
) do |msg|
  puts "GOT #{msg} from #{msg.sender}"
  sleep 0.5
  nil
end

driver.register(
  event_spec: ['h**', '**::hello'],
  name: 'inline_bob'
) do |message|
  puts "Block Received: Event(#{message}) from #{message.sender}" 
  puts "Block Received: Payload(#{message.payload})" if message.payload
  message << "haha"
  "hi"
end

#pp driver.services

Thread.new { 
  10.times do 
    driver << "send::thread"
    sleep 0.1
  end
}
first_message = driver << ["hi::bob", "potato"]
sleep 0.25
driver << ["hello::jim", "pot"]
sleep 0.25
driver << ["hola::xxx", "stew"]
pp first_message.shift(5.0)
sleep 5.0
